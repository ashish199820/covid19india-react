{"version":3,"sources":["components/level.js","constants.js","components/mapexplorer.js","components/home.js","components/tracker/search.js","components/tracker/routing.js","components/tracker/mapChart.js","components/tracker/display.js","components/tracker/tracker.js","components/navbar.js","components/banner.js","App.js","serviceWorker.js","index.js","components/tracker/green.svg","components/tracker/red.svg"],"names":["Level","MAP_TYPES","Home","search","Search","map","this","props","leaflet","searchControl","ELG","addTo","results","L","LayerGroup","on","data","clearLayers","length","latlng","addLayer","marker","Component","withLeaflet","leafletElement","RoutingMachine","console","log","road","color","Routing","control","waypoints","router","mapbox","lineOptions","styles","opacity","weight","containerClassName","collapsible","addWaypoints","draggableWaypoints","routeWhileDragging","fitSelectedRoutes","showAlternatives","altLineOptions","setWaypoints","latLng","getContainer","style","maxWidth","hide","getPlan","MapLayer","research","require","greenIcon","Icon","iconUrl","iconRetinaUrl","iconSize","redIcon","MapChart","useState","activeList","setActiveList","direction","setDirection","refs","items","reduce","acc","value","id","React","createRef","useEffect","markerToList","current","scrollIntoView","block","behavior","className","Map","onmoveend","e","getBounds","center","currentLocation","pinLocation","zoom","radius","TileLayer","detectRetina","maxNativeZoom","maxZoom","url","attribution","item","Marker","key","icon","catid","position","lat","lng","onclick","pLocation","Circle","fillColor","cases","Popup","autoPan","searchMap","display","height","width","src","onClick","ref","city","cutDescription","location","window","scrollTo","top","alert","Display","children","URL","reset","Tracker","input","setInputData","setCurrentLocation","error","setError","invalidPin","setInvalidPin","receiveData","setReceiveData","fetchData","list","axios","get","params","latitude","longitude","then","response","catch","err","textAlign","fontSize","minDist","district","isNaN","event","preventDefault","navigator","geolocation","getCurrentPosition","coords","getLocationHandler","TextField","type","placeholder","onChange","val","target","inputHandler","InputProps","endAdornment","InputAdornment","IconButton","pinCode","PIN_validity","searchHandler","Navbar","pathname","animationDelay","transition","pages","page","i","to","pageLink","path","animationDelayForNavbar","displayName","Banner","snippets","setSnippets","snippet","setSnippet","factoids","Math","floor","random","snippetChooser","useCallback","min","max","index","interval","setInterval","clearInterval","banner","history","createBrowserHistory","App","view","render","exact","component","href","rel","justifyContent","Boolean","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.e214c4cc.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nfunction Level(props) {\r\n  const [data, setData] = useState(props.data);\r\n  const [confirmed, setConfirmed] = useState(0);\r\n  const [active, setActive] = useState(0);\r\n  const [recoveries, setRecoveries] = useState(0);\r\n  const [deaths, setDeaths] = useState(0);\r\n  const [deltas, setDeltas] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setData(props.data);\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    const parseData = () => {\r\n      let confirmed = 0;\r\n      let active = 0;\r\n      let recoveries = 0;\r\n      let deaths = 0;\r\n      let deltas = {};\r\n      data.forEach((state, index) => {\r\n        if (index !== 0) {\r\n          confirmed += parseInt(state.confirmed);\r\n          active += parseInt(state.active);\r\n          recoveries += parseInt(state.recovered);\r\n          deaths += parseInt(state.deaths);\r\n        } else {\r\n          deltas = {\r\n            confirmed: parseInt(state.deltaconfirmed),\r\n            deaths: parseInt(state.deltadeaths),\r\n            recovered: parseInt(state.deltarecovered),\r\n          };\r\n        }\r\n      });\r\n      setConfirmed(confirmed);\r\n      setActive(active);\r\n      setRecoveries(recoveries);\r\n      setDeaths(deaths);\r\n      setDeltas(deltas);\r\n    };\r\n    parseData();\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"Level fadeInUp\" style={{animationDelay: '0.8s'}}>\r\n      <div className=\"level-item is-cherry\">\r\n        <h5>Confirmed</h5>\r\n        <h4>\r\n          [\r\n          {deltas\r\n            ? deltas.confirmed >= 0\r\n              ? '+' + deltas.confirmed\r\n              : '+0'\r\n            : ''}\r\n          ]\r\n        </h4>\r\n        <h1>{confirmed} </h1>\r\n      </div>\r\n\r\n      <div className=\"level-item is-blue\">\r\n        <h5 className=\"heading\">Active</h5>\r\n        <h4>&nbsp;</h4>\r\n        {/* <h4>[{props.deltas ? props.deltas.confirmeddelta-(props.deltas.recovereddelta+props.deltas.deceaseddelta) >=0 ? '+'+(props.deltas.confirmeddelta-(props.deltas.recovereddelta+props.deltas.deceaseddelta)).toString() : '+0' : ''}]</h4>*/}\r\n        <h1 className=\"title has-text-info\">{active}</h1>\r\n      </div>\r\n\r\n      <div className=\"level-item is-green\">\r\n        <h5 className=\"heading\">Recovered</h5>\r\n        <h4>\r\n          [\r\n          {deltas\r\n            ? deltas.recovered >= 0\r\n              ? '+' + deltas.recovered\r\n              : '+0'\r\n            : ''}\r\n          ]\r\n        </h4>\r\n        <h1 className=\"title has-text-success\">{recoveries} </h1>\r\n      </div>\r\n\r\n      <div className=\"level-item is-gray\">\r\n        <h5 className=\"heading\">Deceased</h5>\r\n        <h4>\r\n          [{deltas ? (deltas.deaths >= 0 ? '+' + deltas.deaths : '+0') : ''}]\r\n        </h4>\r\n        <h1 className=\"title has-text-grey\">{deaths}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Level;\r\n","export const MAP_TYPES = {\r\n  COUNTRY: 'country',\r\n  STATE: 'state',\r\n};\r\n\r\nexport const MAPS_DIR = '/maps';\r\n","import React, {useState, useEffect, useMemo, useCallback} from 'react';\r\nimport ChoroplethMap from './choropleth';\r\nimport {MAP_TYPES, MAPS_DIR} from '../constants';\r\nimport {formatDate, formatDateAbsolute} from '../utils/common-functions';\r\nimport {formatDistance} from 'date-fns';\r\n\r\nconst mapMeta = {\r\n  India: {\r\n    name: 'India',\r\n    geoDataFile: `${MAPS_DIR}/india.json`,\r\n    mapType: MAP_TYPES.COUNTRY,\r\n    graphObjectName: 'india',\r\n  },\r\n  'Andaman and Nicobar Islands': {\r\n    name: 'Andaman and Nicobar Islands',\r\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'andamannicobarislands_district',\r\n  },\r\n  'Arunachal Pradesh': {\r\n    name: 'Arunachal Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'arunachalpradesh_district',\r\n  },\r\n  'Andhra Pradesh': {\r\n    name: 'Andhra Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'andhrapradesh_district',\r\n  },\r\n\r\n  Assam: {\r\n    name: 'Assam',\r\n    geoDataFile: `${MAPS_DIR}/assam.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'assam_district',\r\n  },\r\n  Bihar: {\r\n    name: 'Bihar',\r\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'bihar_district',\r\n  },\r\n  Chhattisgarh: {\r\n    name: 'Chhattisgarh',\r\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'chhattisgarh_district',\r\n  },\r\n  Delhi: {\r\n    name: 'Delhi',\r\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'delhi_district',\r\n  },\r\n  Karnataka: {\r\n    name: 'Karnataka',\r\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'karnataka_district',\r\n  },\r\n  Kerala: {\r\n    name: 'Kerala',\r\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'kerala_district',\r\n  },\r\n  Goa: {\r\n    name: 'Goa',\r\n    geoDataFile: `${MAPS_DIR}/goa.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'goa_district',\r\n  },\r\n  Gujarat: {\r\n    name: 'Gujarat',\r\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'gujarat_district',\r\n  },\r\n  Haryana: {\r\n    name: 'Haryana',\r\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'haryana_district',\r\n  },\r\n  'Himachal Pradesh': {\r\n    name: 'Himachal Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'himachalpradesh_district',\r\n  },\r\n  'Jammu and Kashmir': {\r\n    name: 'Jammu and Kashmir',\r\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'jammukashmir_district',\r\n  },\r\n  Jharkhand: {\r\n    name: 'Jharkhand',\r\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'jharkhand_district',\r\n  },\r\n  Ladakh: {\r\n    name: 'Ladakh',\r\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'ladakh_district',\r\n  },\r\n  'Madhya Pradesh': {\r\n    name: 'Madhya Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'madhyapradesh_district',\r\n  },\r\n  Maharashtra: {\r\n    name: 'Maharashtra',\r\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'maharashtra_district',\r\n  },\r\n  Manipur: {\r\n    name: 'Manipur',\r\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'manipur_district',\r\n  },\r\n  Meghalaya: {\r\n    name: 'Meghalaya',\r\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'meghalaya_district',\r\n  },\r\n  Mizoram: {\r\n    name: 'Mizoram',\r\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'mizoram_district',\r\n  },\r\n  Nagaland: {\r\n    name: 'Nagaland',\r\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'nagaland_district',\r\n  },\r\n  Odisha: {\r\n    name: 'Odisha',\r\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'odisha_district',\r\n  },\r\n  Punjab: {\r\n    name: 'Punjab',\r\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'punjab_district',\r\n  },\r\n  Rajasthan: {\r\n    name: 'Rajasthan',\r\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'rajasthan_district',\r\n  },\r\n  Sikkim: {\r\n    name: 'Sikkim',\r\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'sikkim_district',\r\n  },\r\n  'Tamil Nadu': {\r\n    name: 'Tamil Nadu',\r\n    geoDataFile: `${MAPS_DIR}/tamil-nadu.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'tamilnadu_district',\r\n  },\r\n  Telangana: {\r\n    name: 'Telangana',\r\n    geoDataFile: `${MAPS_DIR}/telangana.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'telangana_district',\r\n  },\r\n  Tripura: {\r\n    name: 'Tripura',\r\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'tripura_district',\r\n  },\r\n  Uttarakhand: {\r\n    name: 'Uttarakhand',\r\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'uttarakhand_district',\r\n  },\r\n  'Uttar Pradesh': {\r\n    name: 'Uttar Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'uttarpradesh_district',\r\n  },\r\n\r\n  'West Bengal': {\r\n    name: 'West Bengal',\r\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'westbengal_district',\r\n  },\r\n};\r\n\r\nexport default function ({states, stateDistrictWiseData, regionHighlighted}) {\r\n  const [selectedRegion, setSelectedRegion] = useState({});\r\n  const [currentHoveredRegion, setCurrentHoveredRegion] = useState({});\r\n  const [currentMap, setCurrentMap] = useState(mapMeta.India);\r\n\r\n  useEffect(() => {\r\n    const region = getRegionFromState(states[1]);\r\n    setCurrentHoveredRegion(region);\r\n  }, [states]);\r\n\r\n  if (!currentHoveredRegion) {\r\n    return null;\r\n  }\r\n\r\n  const [statistic, currentMapData] = useMemo(() => {\r\n    const statistic = {total: 0, maxConfirmed: 0};\r\n    let currentMapData = {};\r\n\r\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\r\n      currentMapData = states.reduce((acc, state) => {\r\n        if (state.state === 'Total') {\r\n          return acc;\r\n        }\r\n        const confirmed = parseInt(state.confirmed);\r\n        statistic.total += confirmed;\r\n        if (confirmed > statistic.maxConfirmed) {\r\n          statistic.maxConfirmed = confirmed;\r\n        }\r\n\r\n        acc[state.state] = state.confirmed;\r\n        return acc;\r\n      }, {});\r\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\r\n      const districtWiseData = (\r\n        stateDistrictWiseData[currentMap.name] || {districtData: {}}\r\n      ).districtData;\r\n      currentMapData = Object.keys(districtWiseData).reduce((acc, district) => {\r\n        const confirmed = parseInt(districtWiseData[district].confirmed);\r\n        statistic.total += confirmed;\r\n        if (confirmed > statistic.maxConfirmed) {\r\n          statistic.maxConfirmed = confirmed;\r\n        }\r\n        acc[district] = districtWiseData[district].confirmed;\r\n        return acc;\r\n      }, {});\r\n    }\r\n    return [statistic, currentMapData];\r\n  }, [currentMap, states, stateDistrictWiseData]);\r\n\r\n  const setHoveredRegion = useCallback(\r\n    (name, currentMap) => {\r\n      if (currentMap.mapType === MAP_TYPES.COUNTRY) {\r\n        setCurrentHoveredRegion(\r\n          getRegionFromState(states.filter((state) => name === state.state)[0])\r\n        );\r\n      } else if (currentMap.mapType === MAP_TYPES.STATE) {\r\n        const state = stateDistrictWiseData[currentMap.name] || {\r\n          districtData: {},\r\n        };\r\n        let districtData = state.districtData[name];\r\n        if (!districtData) {\r\n          districtData = {\r\n            confirmed: 0,\r\n            active: 0,\r\n            deaths: 0,\r\n            recovered: 0,\r\n          };\r\n        }\r\n        setCurrentHoveredRegion(getRegionFromDistrict(districtData, name));\r\n      }\r\n    },\r\n    [stateDistrictWiseData, states]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (regionHighlighted === undefined) {\r\n      return;\r\n    } else if (regionHighlighted === null) {\r\n      setSelectedRegion(null);\r\n      return;\r\n    }\r\n    const isState = !('district' in regionHighlighted);\r\n    if (isState) {\r\n      const newMap = mapMeta['India'];\r\n      setCurrentMap(newMap);\r\n      const region = getRegionFromState(regionHighlighted.state);\r\n      setCurrentHoveredRegion(region);\r\n      setSelectedRegion(region.name);\r\n    } else {\r\n      const newMap = mapMeta[regionHighlighted.state.state];\r\n      if (!newMap) {\r\n        return;\r\n      }\r\n      setCurrentMap(newMap);\r\n      setHoveredRegion(regionHighlighted.district, newMap);\r\n      setSelectedRegion(regionHighlighted.district);\r\n    }\r\n  }, [regionHighlighted, currentMap.mapType, setHoveredRegion]);\r\n\r\n  const getRegionFromDistrict = (districtData, name) => {\r\n    if (!districtData) {\r\n      return;\r\n    }\r\n    const region = {...districtData};\r\n    if (!region.name) {\r\n      region.name = name;\r\n    }\r\n    return region;\r\n  };\r\n\r\n  const getRegionFromState = (state) => {\r\n    if (!state) {\r\n      return;\r\n    }\r\n    const region = {...state};\r\n    if (!region.name) {\r\n      region.name = region.state;\r\n    }\r\n    return region;\r\n  };\r\n\r\n  const switchMapToState = useCallback(\r\n    (name) => {\r\n      const newMap = mapMeta[name];\r\n      if (!newMap) {\r\n        return;\r\n      }\r\n      setCurrentMap(newMap);\r\n      if (newMap.mapType === MAP_TYPES.COUNTRY) {\r\n        setHoveredRegion(states[1].state, newMap);\r\n      } else if (newMap.mapType === MAP_TYPES.STATE) {\r\n        const districtData = (stateDistrictWiseData[name] || {districtData: {}})\r\n          .districtData;\r\n        const topDistrict = Object.keys(districtData)\r\n          .filter((name) => name !== 'Unknown')\r\n          .sort((a, b) => {\r\n            return districtData[b].confirmed - districtData[a].confirmed;\r\n          })[0];\r\n        setHoveredRegion(topDistrict, newMap);\r\n      }\r\n    },\r\n    [setHoveredRegion, stateDistrictWiseData, states]\r\n  );\r\n  const {name, lastupdatedtime} = currentHoveredRegion;\r\n\r\n  return (\r\n    <div className=\"MapExplorer fadeInUp\" style={{animationDelay: '1.2s'}}>\r\n      <div className=\"header\">\r\n        <h1>{currentMap.name}</h1>\r\n        <h6>\r\n          {window.innerWidth <= 769 ? 'Tap' : 'Hover'} over a{' '}\r\n          {currentMap.mapType === MAP_TYPES.COUNTRY ? 'state/ut' : 'district'}{' '}\r\n          for more details\r\n        </h6>\r\n        {window.innerWidth <= 769 && (\r\n          <h6 style={{marginTop: '1rem'}}>\r\n            <span\r\n              style={{\r\n                fontWeight: 900,\r\n                color: '#fff',\r\n                background: '#000',\r\n                padding: '0.25rem',\r\n                borderRadius: '2.5px',\r\n                marginRight: '0.25rem',\r\n              }}\r\n            >\r\n              Update!\r\n            </span>{' '}\r\n            Tap twice on states to view districts!\r\n          </h6>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"map-stats\">\r\n        <div className=\"stats\">\r\n          <h5>Confirmed</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{currentHoveredRegion.confirmed}</h1>\r\n            <h6>{}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"stats is-blue\">\r\n          <h5>Active</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{currentHoveredRegion.active || ''}</h1>\r\n            <h6>{}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"stats is-green\">\r\n          <h5>Recovered</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{currentHoveredRegion.recovered || ''}</h1>\r\n            <h6>{}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"stats is-gray\">\r\n          <h5>Deceased</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{currentHoveredRegion.deaths || ''}</h1>\r\n            <h6>{}</h6>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"meta\">\r\n        <h2>{name}</h2>\r\n        {lastupdatedtime && (\r\n          <div\r\n            className={`last-update ${\r\n              currentMap.mapType === MAP_TYPES.STATE\r\n                ? 'district-last-update'\r\n                : 'state-last-update'\r\n            }`}\r\n          >\r\n            <h6>Last Updated</h6>\r\n            <h3\r\n              title={\r\n                isNaN(Date.parse(formatDate(lastupdatedtime)))\r\n                  ? ''\r\n                  : formatDateAbsolute(lastupdatedtime)\r\n              }\r\n            >\r\n              {isNaN(Date.parse(formatDate(lastupdatedtime)))\r\n                ? ''\r\n                : formatDistance(\r\n                    new Date(formatDate(lastupdatedtime)),\r\n                    new Date()\r\n                  ) + ' Ago'}\r\n            </h3>\r\n          </div>\r\n        )}\r\n\r\n        {currentMap.mapType === MAP_TYPES.STATE &&\r\n        currentMapData.Unknown > 0 ? (\r\n          <h4 className=\"unknown\">\r\n            Districts unknown for {currentMapData.Unknown} people\r\n          </h4>\r\n        ) : null}\r\n\r\n        {currentMap.mapType === MAP_TYPES.STATE ? (\r\n          <div\r\n            className=\"button back-button\"\r\n            onClick={() => switchMapToState('India')}\r\n          >\r\n            Back\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n\r\n      <ChoroplethMap\r\n        statistic={statistic}\r\n        mapMeta={currentMap}\r\n        mapData={currentMapData}\r\n        setHoveredRegion={setHoveredRegion}\r\n        changeMap={switchMapToState}\r\n        selectedRegion={selectedRegion}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {formatDistance} from 'date-fns';\r\nimport {\r\n  formatDate,\r\n  formatDateAbsolute,\r\n  validateCTS,\r\n} from '../utils/common-functions';\r\n/* import * as Icon from 'react-feather';\r\nimport {Link} from 'react-router-dom';*/\r\n\r\nimport Table from './table';\r\nimport Level from './level';\r\nimport MapExplorer from './mapexplorer';\r\nimport TimeSeries from './timeseries';\r\nimport Minigraph from './minigraph';\r\n/* import Patients from './patients';*/\r\n\r\nfunction Home(props) {\r\n  const [states, setStates] = useState([]);\r\n  const [stateDistrictWiseData, setStateDistrictWiseData] = useState({});\r\n  /* const [patients, setPatients] = useState([]);*/\r\n  const [fetched, setFetched] = useState(false);\r\n  const [graphOption, setGraphOption] = useState(1);\r\n  const [lastUpdated, setLastUpdated] = useState('');\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const [timeseriesMode, setTimeseriesMode] = useState(true);\r\n  const [timeseriesLogMode, setTimeseriesLogMode] = useState(false);\r\n  const [regionHighlighted, setRegionHighlighted] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    if (fetched === false) {\r\n      getStates();\r\n    }\r\n  }, [fetched]);\r\n\r\n  const getStates = async () => {\r\n    try {\r\n      const [response, stateDistrictWiseResponse] = await Promise.all([\r\n        axios.get('https://api.covid19india.org/data.json'),\r\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\r\n        /* axios.get('https://api.covid19india.org/raw_data.json'),*/\r\n      ]);\r\n      setStates(response.data.statewise);\r\n      setTimeseries(validateCTS(response.data.cases_time_series));\r\n      setLastUpdated(response.data.statewise[0].lastupdatedtime);\r\n      setStateDistrictWiseData(stateDistrictWiseResponse.data);\r\n      /* setPatients(rawDataResponse.data.raw_data.filter((p) => p.detectedstate));*/\r\n      setFetched(true);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const onHighlightState = (state, index) => {\r\n    if (!state && !index) setRegionHighlighted(null);\r\n    else setRegionHighlighted({state, index});\r\n  };\r\n  const onHighlightDistrict = (district, state, index) => {\r\n    if (!state && !index && !district) setRegionHighlighted(null);\r\n    else setRegionHighlighted({district, state, index});\r\n  };\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <div className=\"home-left\">\r\n        <div className=\"header fadeInUp\" style={{animationDelay: '0.5s'}}>\r\n          <div className=\"header-mid\">\r\n            <div className=\"titles\">\r\n              <h1>India COVID-19 Tracker</h1>\r\n              <h6 style={{fontWeight: 600}}>A Crowdsourced Initiative</h6>\r\n            </div>\r\n            <div className=\"last-update\">\r\n              <h6>Last Updated</h6>\r\n              <h6 style={{color: '#28a745', fontWeight: 600}}>\r\n                {isNaN(Date.parse(formatDate(lastUpdated)))\r\n                  ? ''\r\n                  : formatDistance(\r\n                      new Date(formatDate(lastUpdated)),\r\n                      new Date()\r\n                    ) + ' Ago'}\r\n              </h6>\r\n              <h6 style={{color: '#28a745', fontWeight: 600}}>\r\n                {isNaN(Date.parse(formatDate(lastUpdated)))\r\n                  ? ''\r\n                  : formatDateAbsolute(lastUpdated)}\r\n              </h6>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {states.length > 1 && <Level data={states} />}\r\n        <Minigraph timeseries={timeseries} animate={true} />\r\n        <Table\r\n          states={states}\r\n          summary={false}\r\n          stateDistrictWiseData={stateDistrictWiseData}\r\n          onHighlightState={onHighlightState}\r\n          onHighlightDistrict={onHighlightDistrict}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"home-right\">\r\n        {fetched && (\r\n          <React.Fragment>\r\n            <MapExplorer\r\n              states={states}\r\n              stateDistrictWiseData={stateDistrictWiseData}\r\n              regionHighlighted={regionHighlighted}\r\n            />\r\n\r\n            <div\r\n              className=\"timeseries-header fadeInUp\"\r\n              style={{animationDelay: '1.5s'}}\r\n            >\r\n              <h1>Spread Trends</h1>\r\n              <div className=\"tabs\">\r\n                <div\r\n                  className={`tab ${graphOption === 1 ? 'focused' : ''}`}\r\n                  onClick={() => {\r\n                    setGraphOption(1);\r\n                  }}\r\n                >\r\n                  <h4>Cumulative</h4>\r\n                </div>\r\n                <div\r\n                  className={`tab ${graphOption === 2 ? 'focused' : ''}`}\r\n                  onClick={() => {\r\n                    setGraphOption(2);\r\n                  }}\r\n                >\r\n                  <h4>Daily</h4>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"scale-modes\">\r\n                <label>Scale Modes</label>\r\n                <div className=\"timeseries-mode\">\r\n                  <label htmlFor=\"timeseries-mode\">Uniform</label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={timeseriesMode}\r\n                    className=\"switch\"\r\n                    aria-label=\"Checked by default to scale uniformly.\"\r\n                    onChange={(event) => {\r\n                      setTimeseriesMode(!timeseriesMode);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div\r\n                  className={`timeseries-logmode ${\r\n                    graphOption !== 1 ? 'disabled' : ''\r\n                  }`}\r\n                >\r\n                  <label htmlFor=\"timeseries-logmode\">Logarithmic</label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={graphOption === 1 && timeseriesLogMode}\r\n                    className=\"switch\"\r\n                    disabled={graphOption !== 1}\r\n                    onChange={(event) => {\r\n                      setTimeseriesLogMode(!timeseriesLogMode);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <TimeSeries\r\n              timeseries={timeseries}\r\n              type={graphOption}\r\n              mode={timeseriesMode}\r\n              logMode={timeseriesLogMode}\r\n            />\r\n\r\n            {/* Testing Rebuild*/}\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n\r\n      {/* <div className=\"home-left\">\r\n        {patients.length > 1 && (\r\n          <div className=\"patients-summary\">\r\n            <h1>Recent Cases</h1>\r\n            <h6>A summary of the latest reported cases</h6>\r\n            <div className=\"legend\">\r\n              <div className=\"legend-left\">\r\n                <div className=\"circle is-female\"></div>\r\n                <h5 className=\"is-female\">Female</h5>\r\n                <div className=\"circle is-male\"></div>\r\n                <h5 className=\"is-male\">Male</h5>\r\n                <div className=\"circle\"></div>\r\n                <h5 className=\"\">Unknown</h5>\r\n              </div>\r\n            </div>\r\n            <div className=\"patients-summary-wrapper\">\r\n              <Patients\r\n                patients={patients}\r\n                summary={true}\r\n                colorMode={'genders'}\r\n              />\r\n            </div>\r\n            <button className=\"button\">\r\n              <Link to=\"/database\">\r\n                <Icon.Database />\r\n                <span>View the Patients Database</span>\r\n              </Link>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"home-right\"></div>\r\n    */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { Component } from \"react\";\r\nimport L from \"leaflet\";\r\nimport * as ELG from \"esri-leaflet-geocoder\";\r\nimport { withLeaflet } from \"react-leaflet\";\r\nlet search=null;\r\nclass Search extends Component {\r\n  \r\n  componentDidMount() {\r\n    const map = this.props.leaflet.map;\r\n    const searchControl = new ELG.Geosearch().addTo(map);\r\n    const results = new L.LayerGroup().addTo(map);\r\n    searchControl.on(\"results\", function(data) {\r\n      results.clearLayers();\r\n      //   for (let i = data.results.length - 1; i >= 0; i--) {}\r\n      if(data.results.length)\r\n      search(data.results[0].latlng)\r\n\r\n      results.addLayer(L.marker(data.results[0].latlng));\r\n      \r\n    });\r\n  }\r\n\r\n  render() {\r\n   search= this.props.search;\r\n    return null;\r\n  }\r\n}\r\n//export default Search;\r\nexport default withLeaflet(Search);\r\n\r\n","import { MapLayer } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport React ,{useState} from 'react'\r\nimport { withLeaflet } from 'react-leaflet';\r\nimport 'leaflet-routing-machine/src';\r\nimport 'leaflet-routing-machine/dist/leaflet-routing-machine.css';\r\n//const portalRoot = document.getElementById(\"control\")\r\nlet leafletElement = null;\r\nclass RoutingMachine extends MapLayer {\r\n\r\n\r\n\r\n  shouldComponentUpdate(){\r\n    console.log('should component update',this.props.road);\r\n    return true;\r\n  }\r\n  createLeafletElement() {\r\n    console.log('inside leaflet element')\r\n    const color = this.props.color;\r\n  //  const road = this.props.road;\r\n    const map =this.props.leaflet.map;\r\n   \r\n    console.log('map',map)\r\n    console.log(\"Route computation: \")\r\n    \r\n    leafletElement = L.Routing.control({\r\n      \r\n      waypoints:[],\r\n      router: L.Routing.mapbox('pk.eyJ1IjoibHVpZ2kwMjI5IiwiYSI6ImNqNnhseGNsczFyb2Eyd3Bkbmp4cW5jbzAifQ.auFCa3NZcIgFS20o8QreNw'),\r\n      lineOptions: {\r\n        styles: [{ \r\n          color, \r\n          opacity: 1,\r\n          weight: 6 \r\n        }]\r\n      },\r\n    //   collapseBtn(){\r\n    //      \r\n    //   },\r\n    containerClassName:'tracker-map',\r\n      collapsible:true,\r\n      addWaypoints: true,\r\n      draggableWaypoints: true,\r\n      routeWhileDragging: false,\r\n      fitSelectedRoutes: true,\r\n      showAlternatives: false,\r\n      altLineOptions: { styles: [{opacity: 1}] },\r\n      //createMarker: () => { return null; }\r\n    })\r\n    .addTo(map); ///table tbody td\r\n    \r\n     leafletElement.setWaypoints([L.latLng(this.props.road[0]),L.latLng(this.props.road[1])]);\r\n    leafletElement.getContainer().style.maxWidth='150px';\r\n     leafletElement.hide(); // hide road describtion\r\n    return leafletElement.getPlan();\r\n  }\r\n\r\n  updateLeafletElement(){\r\n    console.log('inside leaflet element')\r\n    const color = this.props.color;\r\n  //  const road = this.props.road;\r\n    const map =this.props.leaflet.map;\r\n   \r\n    console.log('map',map)\r\n    console.log(\"Route computation: \")\r\n    //map.removeControl(L.routing.control())\r\n    // let leafletElement = L.Routing.control({\r\n      \r\n    //   waypoints:[],\r\n    //   router: L.Routing.mapbox('pk.eyJ1IjoibHVpZ2kwMjI5IiwiYSI6ImNqNnhseGNsczFyb2Eyd3Bkbmp4cW5jbzAifQ.auFCa3NZcIgFS20o8QreNw'),\r\n    //   lineOptions: {\r\n    //     styles: [{ \r\n    //       color, \r\n    //       opacity: 1,\r\n    //       weight: 6 \r\n    //     }]\r\n    //   },\r\n    // //   collapseBtn(){\r\n    // //      \r\n    // //   },\r\n    // containerClassName:'tracker-map',\r\n    //   collapsible:true,\r\n    //   addWaypoints: true,\r\n    //   draggableWaypoints: true,\r\n    //   routeWhileDragging: false,\r\n    //   fitSelectedRoutes: true,\r\n    //   showAlternatives: false,\r\n    //   altLineOptions: { styles: [{opacity: 1}] },\r\n    //   //createMarker: () => { return null; }\r\n    // })\r\n    //  .addTo(map); ///table tbody td\r\n    if(leafletElement){\r\n      leafletElement.setWaypoints([L.latLng(this.props.road[0]),L.latLng(this.props.road[1])]);\r\n      leafletElement.getContainer().style.maxWidth='150px';\r\n       leafletElement.hide(); // hide road describtion\r\n    }\r\n    \r\n    \r\n   return leafletElement.getPlan();\r\n  }\r\n render(){return null}\r\n  \r\n}\r\n\r\nexport default withLeaflet(RoutingMachine);","import React,{useState, useEffect,useRef} from 'react';\r\nimport { Map, Marker, Popup, TileLayer,Circle,CircleMarker,withLeaflet} from \"react-leaflet\";\r\nimport L, { marker } from 'leaflet';\r\nimport Search from './search'\r\nimport './red.svg';\r\nimport './green.svg'\r\nimport RoutingMachine from './routing'\r\nimport 'leaflet/dist/leaflet.css'\r\nvar research = require('../../hospital.json')\r\n\r\n//import greenLogo from './green.svg'\r\n//import redLogo from './red.svg'\r\nconst greenIcon = new  L.Icon({\r\n  iconUrl:require('./green.svg'),\r\n  iconRetinaUrl: require('./green.svg'),\r\n  iconSize:[18,18],\r\n  });\r\n\r\nconst redIcon = new L.Icon({\r\n  iconUrl:require('./red.svg'),\r\n  iconRetinaUrl: require('./red.svg'),\r\n  iconSize:[18,18],\r\n  });\r\n\r\n function MapChart(props) {\r\nconst [activeList,setActiveList]= useState(null);\r\nconst [direction,setDirection]=useState(null)\r\nconst [click,setClick]=useState(false);\r\n\r\n  const refs = research.items.reduce((acc, value) => \r\n   { acc[value.id] = React.createRef();\r\n    return acc;\r\n  }, {});\r\n      \r\nuseEffect(()=>{\r\n  console.log('component updated')\r\n},[activeList,direction])\r\nconst markerToList=(id)=>{\r\nrefs[id].current.scrollIntoView({block:'center', behavior: 'smooth'})\r\nsetActiveList(id)\r\n}\r\n\r\nconst directionHandler=(location)=>{\r\nwindow.scrollTo({\r\n  top:0\r\n})\r\nif(props.currentLocation==null)\r\n  alert('Enter your location via gps or search box')\r\nsetDirection(location)\r\nconsole.log('location',direction,props.currentLocation)\r\n\r\n}\r\nconst clearRouteHandler=()=>{\r\n  \r\n  console.log('[inside clear route handler]')\r\n  setDirection(null)\r\n}\r\n\r\nconst getBounds=(e)=>{\r\n\r\n  console.log('inside getBound',e);\r\n}\r\n\r\n  return (\r\n    <div className=\"map-container\">\r\n      <div >\r\n    <Map  className=\"leaflet-container \"   onmoveend={(e)=>getBounds(e)}\r\n       center={props.currentLocation||props.pinLocation||[28.7041,77.1025]} zoom={props.radius?(props.radius>6?10:11):11} >\r\n      <TileLayer\r\n        detectRetina={true}\r\n        maxNativeZoom=\"17\"\r\n        maxZoom={17}\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\"></a> '\r\n      />\r\n\r\n       {research.items.map((item)=>{\r\n         return(<Marker key ={item.id} \r\n          icon={item.catid=='15'?greenIcon:redIcon} position={[item.lat,item.lng]}\r\n           onclick={()=>markerToList(item.id)} >\r\n         \r\n      </Marker>)\r\n       })}\r\n       \r\n      {props.pLocation?( <Circle center={props.pLocation} fillColor=\"blue\" color=\"red\" radius={props.cases>'50'?10000:6000}>\r\n      <Popup autoPan><h5>{props.cases} cases present in this area.</h5></Popup>\r\n          </Circle>):null}\r\n        \r\n     <Search  search={props.searchMap}/>\r\n\r\n    <RoutingMachine\r\n          color=\"#345\"\r\n          road={(props.currentLocation&&direction)?[props.currentLocation,direction]:[]}\r\n       />}\r\n         \r\n    </Map>\r\n    <div style={{display:'flex'}}>\r\n      <span><img height='15px' width='15px' src={require('./green.svg')}/>:GOVT</span>\r\n      <span><img height='15px' width='15px' src={require('./red.svg')}/>:PRIVATE</span>\r\n      <span className=\"button\" onClick={clearRouteHandler}>clear route</span>\r\n      </div>\r\n    </div>\r\n     \r\n     <div className=\"tracker_hospital\" >\r\n     {  research.items.map(item=>{\r\n  return (\r\n    <div className={item.id===activeList?'row highlighted':'row'} ref={refs[item.id]} > \r\n    <div onClick={()=>markerToList(item.id)}>{item.city}</div>\r\n    <div onClick={()=>markerToList(item.id)}>{item.cutDescription}</div>\r\n    <div><button className=\"button\"  onClick={()=>directionHandler([item.lat,item.lng])}>Direction</button></div>\r\n     </div>\r\n  )\r\n })\r\n}\r\n  </div>\r\n    </div>\r\n   \r\n  );\r\n}\r\nexport default  MapChart;  ","import React from 'react'\r\n\r\nconst Display=(props)=>{\r\n\r\n    return (\r\n        <div className=\"tracker_display\">\r\n            <h4 className=\"line anim-typewriter\">{props.children}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display","import React,{useEffect,useState}  from 'react';\r\nimport MapChart from './mapChart'\r\nimport axios from 'axios'\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport RoomTwoToneIcon from '@material-ui/icons/RoomTwoTone';\r\nimport { TextField } from '@material-ui/core';\r\nimport Display from './display.js'\r\nimport { AlignCenter } from 'react-feather';\r\nconst URL ='https://tracker-covid-19.herokuapp.com'\r\nlet pinLocation=null;\r\nlet reset=false;\r\n\r\n\r\nconst Tracker = (props)=>{\r\nconst [input,setInputData] = useState('');\r\nconst [currentLocation,setCurrentLocation]=useState(null);\r\nconst [error,setError] =useState(false);\r\nconst [invalidPin,setInvalidPin]=useState(false);\r\nconst [receiveData,setReceiveData]=useState(null);\r\nconst [loc,setLoc]=useState(null)\r\n\r\nconst fetchData=(list)=>{\r\n  axios.get(URL+'/tracker',{\r\n    params:{\r\n      latitude:list[0],\r\n      longitude:list[1]\r\n    }\r\n   \r\n  }).then(response=>{\r\n    reset=true;\r\n    console.log(response.data);\r\n        \r\n        setReceiveData(response.data);\r\n  })\r\n  .catch(err=>{\r\n    console.log(err);\r\n    setError(true);\r\n  })\r\n}\r\n\r\nconst inputHandler=(event)=>{\r\n    const val  = event.target.value;\r\n    console.log(val);   \r\n    setInputData(val)\r\n}\r\n\r\n\r\nconst getLocationHandler = (event)=>{\r\n  reset=false;\r\n  console.log('location clicked')\r\n    event.preventDefault()\r\n    navigator.geolocation.getCurrentPosition(position=>{\r\n    setCurrentLocation([position.coords.latitude,position.coords.longitude])\r\n    setError(false);\r\n    fetchData([position.coords.latitude,position.coords.longitude]);\r\n    },error=>{\r\n        console.log('unavle to fetch',error);\r\n        setError(true);\r\n\r\n    })\r\n}\r\n\r\n\r\n\r\nconst clickListener=()=>{\r\n  console.log('clicked');\r\n  reset=false;\r\n  axios.get(URL+'/tracker',{\r\n    params:{pinCode:input}\r\n  }).then(response=>{\r\n    console.log(response.data);\r\n    if(!response.data.PIN_validity){\r\n      setInvalidPin(true);\r\n    }\r\n\r\n  \r\n    else{\r\n      pinLocation=[response.data.lat,response.data.lng]\r\n      reset=true;\r\n      setReceiveData(response.data);\r\n      setCurrentLocation(null);\r\n      setInvalidPin(false);\r\n      \r\n    }\r\n  }).catch(err=>{\r\n    console.log(err);\r\n  })\r\n\r\n}\r\n\r\nconst searchHandler = (data)=>{\r\n  reset=false;\r\nconsole.log('successful',data.lat,data.lng );\r\nsetCurrentLocation([data.lat,data.lng]);\r\nfetchData([data.lat,data.lng]);\r\n\r\n}\r\n  return (\r\n  <div className=\"tracker\">\r\n    <div style={{color:'blue',textAlign:'center'}}>\r\n  <RoomTwoToneIcon  style={{fontSize:'3rem'}} />\r\n  <br/>\r\n  <h1 >NearBy Cases</h1>\r\n   </div>\r\n  {error?<p style={{color:\"red\",textAlign:'center'}}>Turn your location ON</p>:null}\r\n  {reset&&receiveData&&<Display>You are within {receiveData.minDist} KM from nearest affected  location {receiveData.district} with {receiveData.cases} positive casses. </Display>}\r\n  <div  style={{color:\"red\",textAlign:'center'}}>{isNaN(input)||invalidPin?'please enter valid pincode':null}</div>\r\n  \r\n    <div className=\"tracker_bar\">\r\n    <button className=\"button\" \r\n     onClick={(event)=>getLocationHandler(event)}>\r\n     GPS Location</button>\r\n     <div >\r\n     <label> <h4 className=\"h4\">Enter Area pincode:</h4></label>\r\n     <TextField className=\"input input_tracker\" \r\n           type=\"text\" placeholder=\"Enter your pincode\"\r\n           onChange={(event)=>inputHandler(event)}\r\n           value={input}\r\n            InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment>\r\n              <IconButton onClick={clickListener}>\r\n              <SearchIcon />\r\n              </IconButton>\r\n              </InputAdornment> )}}\r\n      />\r\n      </div>\r\n          \r\n    </div>\r\n    \r\n    <div>\r\n    <MapChart \r\n      searchMap={(data)=>searchHandler(data)} \r\n      currentLocation={currentLocation}  \r\n      className=\"leaflet-container\"\r\n      pLocation={receiveData?[receiveData.lat,receiveData.lng]:null}\r\n      radius={receiveData?+receiveData.minDist:null}\r\n      cases={receiveData?receiveData.cases:null}\r\n      pinLocation={pinLocation}\r\n      />\r\n      </div>\r\n     <div id=\"control\"></div>\r\n    </div>\r\n    \r\n    )\r\n}\r\nexport default Tracker;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n  // HTML Properties for each of the links in UI\r\n  const navLinkProps = (path, animationDelay) => ({\r\n    className: `fadeInUp ${window.location.pathname === path ? 'focused' : ''}`,\r\n    style: {\r\n      animationDelay: `${animationDelay}s`,\r\n    },\r\n  });\r\n\r\n  if (window.location.pathname !== '/summary') {\r\n    return (\r\n      <div\r\n        className=\"Navbar\"\r\n        style={{\r\n          animationDelay: '0.5s',\r\n          height: window.location.pathname === '/clusters' ? '2.5rem' : '',\r\n          transition: 'all 0.3s ease-in-out',\r\n        }}\r\n      >\r\n        {/* <img\r\n          className=\"fadeInUp logo\"\r\n          alt=\"India COVID-19 Tracker\"\r\n          src=\"/icon.png\"\r\n          style={{\r\n            animationDelay: '0.0s',\r\n            width: window.location.pathname === '/clusters' ? '1.5rem' : '',\r\n            height: window.location.pathname === '/clusters' ? '1.5rem' : '',\r\n            transition: 'all 0.3s ease-in-out',\r\n          }}\r\n        /> */}\r\n\r\n        <div className=\"navbar-left\">\r\n          {props.pages.map((page, i) => {\r\n            return (\r\n              <Link to={page.pageLink} key={i}>\r\n                <span\r\n                  {...navLinkProps(page.pageLink, page.animationDelayForNavbar)}\r\n                >\r\n                  {page.displayName}\r\n                </span>\r\n              </Link>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"navbar-right\"></div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Banner(props) {\r\n  const [snippets, setSnippets] = useState([]);\r\n  const [snippet, setSnippet] = useState();\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get('https://api.covid19india.org/website_data.json')\r\n      .then((response) => {\r\n        setSnippets(response.data.factoids || []);\r\n        setSnippet(\r\n          response.data.factoids[\r\n            Math.floor(\r\n              Math.random() * (response.data.factoids.length - 1 - 0) + 0\r\n            )\r\n          ] || ''\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const snippetChooser = useCallback(\r\n    (min, max) => {\r\n      const index = Math.random() * (max - min) + min;\r\n      setSnippet(snippets[Math.floor(index)]);\r\n    },\r\n    [snippets]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      snippetChooser(0, snippets.length - 1);\r\n    }, 10000);\r\n    return () => clearInterval(interval);\r\n  }, [snippetChooser, snippets]);\r\n\r\n  return (\r\n    <div\r\n      onClick={() => snippetChooser(0, snippets.length - 1)}\r\n      className=\"Banner fadeInUp\"\r\n      style={{animationDelay: '0.2s'}}\r\n    >\r\n      <div className=\"snippet\">{snippet ? snippet.banner : ''} &nbsp;</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport * as Icon from 'react-feather';\r\n\r\nimport './App.scss';\r\n\r\nimport Home from './components/home';\r\nimport Tracker from './components/tracker/tracker'\r\nimport Navbar from './components/navbar';\r\nimport Links from './components/links';\r\nimport FAQ from './components/faq';\r\nimport Banner from './components/banner';\r\n/* import PatientDB from './components/patientdb';*/\r\n\r\nconst history = require('history').createBrowserHistory;\r\n\r\nfunction App() {\r\n  const pages = [\r\n    // {\r\n    //   pageLink: '/',\r\n    //   view: Home,\r\n    //   displayName: 'Home',\r\n    //   animationDelayForNavbar: 0.2,\r\n    // },\r\n    /* {\r\n      pageLink: '/database',\r\n      view: PatientDB,\r\n      displayName: 'Patients DB',\r\n      animationDelayForNavbar: 0.3,\r\n    },*/\r\n    {\r\n      pageLink: '/',\r\n      view: Tracker,\r\n      displayName: 'trackers',\r\n      animationDelayForNavbar: 0.4,\r\n    },\r\n    // {\r\n    //   pageLink: '/links',\r\n    //   view: Links,\r\n    //   displayName: 'Helpful Links',\r\n    //   animationDelayForNavbar: 0.5,\r\n    // },\r\n    // {\r\n    //   pageLink: '/faq',\r\n    //   view: FAQ,\r\n    //   displayName: 'FAQ',\r\n    //   animationDelayForNavbar: 0.6,\r\n    // },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router history={history}>\r\n        <Route\r\n          render={({location}) => (\r\n            <div className=\"Almighty-Router\">\r\n              <Navbar pages={pages} />\r\n              <Banner />\r\n              <Route exact path=\"/\" render={() => <Redirect to=\"/\" />} />\r\n              <Switch location={location}>\r\n                {pages.map((page, i) => {\r\n                  return (\r\n                    <Route\r\n                      exact\r\n                      path={page.pageLink}\r\n                      component={page.view}\r\n                      key={i}\r\n                    />\r\n                  );\r\n                })}\r\n                <Redirect to=\"/\" />\r\n              </Switch>\r\n            </div>\r\n          )}\r\n        />\r\n      </Router>\r\n\r\n      <footer className=\"fadeInUp\" style={{animationDelay: '2s'}}>\r\n        {/* <img\r\n          src=\"/icon.png\"\r\n          alt=\"https://www.covid19india.org | Coronavirus cases live dashboard\"\r\n        />*/}\r\n\r\n        <h5>We stand with everyone fighting on the frontlines</h5>\r\n        <div className=\"link\">\r\n          <a href=\"https://github.com/covid19india\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\">covid19india</a>\r\n        </div>\r\n        <a\r\n          href=\"https://github.com/covid19india/covid19india-react\"\r\n          className=\"button github\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Icon.GitHub />\r\n          <span>Open Sourced on GitHub</span>\r\n        </a>\r\n        <a\r\n          className=\"button excel\"\r\n          href=\"https://bit.ly/patientdb\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Icon.Database />\r\n          <span>Crowdsourced Patient Database&nbsp;</span>\r\n        </a>\r\n        <a\r\n          href=\"https://twitter.com/covid19indiaorg\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"button twitter\"\r\n          style={{justifyContent: 'center'}}\r\n        >\r\n          <Icon.Twitter />\r\n          <span>View updates on Twitter</span>\r\n        </a>\r\n        <a\r\n          href=\"https://bit.ly/covid19crowd\"\r\n          className=\"button telegram\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Icon.MessageCircle />\r\n          <span>Join Telegram to Collaborate!</span>\r\n        </a>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {'Service-Worker': 'script'},\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/green.abc39b8c.svg\";","module.exports = __webpack_public_path__ + \"static/media/red.1573897f.svg\";"],"sourceRoot":""}